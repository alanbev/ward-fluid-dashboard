{"version":3,"sources":["reportWebVitals.js","mock_patients.js","StartStopFluidsButton.js","BagVolume.js","CheckBagForm.js","CheckBag.js","AlterRate.js","IvBag.js","patient.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","patients","bed","hosp_number","patient_name","on_iv_fluids","iv_status","bags","bag_id","fluid","volume","rate","bag_running","time_started","StopStartFluidsButton","props","message","button_label","position","position_in_array","button_class","message_from_patient","message_from_bag","message_from_stopped_bag","id","className","onClick","click_function","BagVolume","useState","vol_remaining","predicted_vol_remaining","setPredictedVolumeRemaining","setBagRunning","useEffect","call_change_vol_remaining","fluid_infused","current","countdown","setTimeout","clearTimeout","checkbag","change_vol","CheckBagForm","volumeEntered","setVolumeEntered","onSubmit","e","preventDefault","undefined","getVol","vol","htmlFor","type","required","value","onChange","target","CheckBag","checkCorrect","setCheckCorrect","Corrected_volume","setCorrectedVolume","checkbagform","index","console","log","is_bag_running","running_bags","start_stop_bag","AlterRate","newRate","setNewRate","new_rate","min","IvBag","bag","setVolRemaining","bag_started","setBagStarted","displaystatus","setDisplayStatus","vol_from_correct","setVolFromCorrect","showCheckBag","setShowcheckBag","showAlterRate","setShowAlterRate","setRate","checkDue","setCheckDue","new_fluid_left","setNewFluidLeft","time_started_str","useRef","checkduebutton","start_time","Date","check","checkTimer","getMinutes","getHours","check_due","show_volume","patient_bags_running","takeDownBagAction","decrement_bags","take_down","window","confirm","array_position","alter_rate_component","setFluidsToday","fluids_today","Patient","patient_data","on_fluids","setOnFluids","show_bags","setShowBags","length","bags_prescribed","setBagsPrescribed","bags_running","display_alert","setDisplayAlert","alarm_state","setAlarmState","alert_message","setAlertMessage","bag_check_due","setBagCheckDue","on_fluids_message","list_of_bags","map","eachbag","showstatus","App","patient_list","Ward","PatientList","data","data_item","patient_in_array","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7e0ab15.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let patients=\r\n[\r\n        {\r\n            bed:1,\r\n            hosp_number:11111111,\r\n            patient_name:\"Mary Test\",\r\n            on_iv_fluids:true,\r\n            iv_status:\"prescribed\",\r\n            bags:\r\n                [\r\n                   {\r\n                        bag_id:1,\r\n                        fluid:\"0.9% Saline\",\r\n                        volume:1000,\r\n                        rate:125,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:2,\r\n                        fluid:\"5% Dextrose\",\r\n                        volume:1000,\r\n                        rate:83,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    }\r\n                ]\r\n        },\r\n        {\r\n            bed:2,\r\n            hosp_number:2222222,\r\n            patient_name:\"Henry Test\",\r\n            on_iv_fluids:true,\r\n            iv_status:\"prescribed\",\r\n            bags:\r\n                [\r\n                   {\r\n                        bag_id:3,\r\n                        fluid:\"Plasmalyte\",\r\n                        volume:1000,\r\n                        rate:100,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:4,\r\n                        fluid:\"0.9% saline 40mmol KCl\",\r\n                        volume:1000,\r\n                        rate:100,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:5,\r\n                        fluid:\"5% dextrose 40mmol KCl\",\r\n                        volume:1000,\r\n                        rate:100,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    }\r\n                ]\r\n        },\r\n        {\r\n            bed:3,\r\n            hosp_number:333333,\r\n            patient_name:\"Fred Test\",\r\n            on_iv_fluids:false,\r\n            iv_status:\"not_prescribed\",\r\n            bags:\r\n                [\r\n                  \r\n                ]\r\n        },\r\n        {\r\n            bed:4,\r\n            hosp_number:4444444,\r\n            patient_name:\"Freda Test\",\r\n            on_iv_fluids:true,\r\n            iv_status:\"prescribed\",\r\n            bags:\r\n                [\r\n                   {\r\n                        bag_id:6,\r\n                        fluid:\"TPN\",\r\n                        volume:3000,\r\n                        rate:125,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:7,\r\n                        fluid:\"0.9% saline\",\r\n                        volume:1000,\r\n                        rate:10,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:8,\r\n                        fluid:\"0.9% Saline 40mmol KCl\",\r\n                        volume:1000,\r\n                        rate:43,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    }\r\n                ]\r\n        },\r\n\r\n        {\r\n            bed:5,\r\n            hosp_number:555555,\r\n            patient_name:\"William Test\",\r\n            on_iv_fluids:true,\r\n            iv_status:\"prescribed\",\r\n            bags:\r\n                [\r\n                   {\r\n                        bag_id:9,\r\n                        fluid:\"Plasmalyte\",\r\n                        volume:1000,\r\n                        rate:100,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:10,\r\n                        fluid:\"0.9% saline 40mmol KCl\",\r\n                        volume:1000,\r\n                        rate:100,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:11,\r\n                        fluid:\"5% dextrose 40mmol KCl\",\r\n                        volume:1000,\r\n                        rate:100,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    }\r\n                ]\r\n        },\r\n        {\r\n            bed:6,\r\n            hosp_number:66666666,\r\n            patient_name:\"Henry Test\",\r\n            on_iv_fluids:false,\r\n            iv_status:\"prescribed\",\r\n            bags:\r\n                [\r\n                   {\r\n                        bag_id:12,\r\n                        fluid:\"Plasmalyte\",\r\n                        volume:1000,\r\n                        rate:83,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:13,\r\n                        fluid:\"Plasmalyte\",\r\n                        volume:1000,\r\n                        rate:83,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    },\r\n                    {\r\n                        bag_id:14,\r\n                        fluid:\"5% dextrose 40mmol KCl\",\r\n                        volume:1000,\r\n                        rate:83,\r\n                        bag_running:true,\r\n                        time_started:null,\r\n                    }\r\n                ]\r\n        },\r\n        {\r\n            bed:7,\r\n            hosp_number:7777777777,\r\n            patient_name:\"Diana Test\",\r\n            on_iv_fluids:true,\r\n            iv_status:\"not-prescribed\",\r\n            bags:\r\n                [\r\n                   \r\n                ]\r\n        },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default patients","import React from \"react\"\r\n\r\nfunction StopStartFluidsButton(props)\r\n{\r\n  let message\r\n  let button_label\r\n  let position=props.position_in_array\r\n  let button_class=\"show_button\"\r\n\r\nif ( props.message_from_patient)\r\n{\r\n\r\n  button_label= (props.message_from_patient===\"On IV fluids\" ?  \"Discontinue IV fluids\" : \"Commence on IV fluids\" )\r\n  message=props.message_from_patient\r\n\r\n}\r\n\r\nelse if (props.message_from_bag)\r\n{\r\n  button_label= (props.message_from_bag===\"Bag not running\" ? \"Start Bag\" : \"Pause Bag\")\r\n  message=props.message_from_bag\r\n}\r\n\r\nelse\r\n{\r\n  button_label= (props.message_from_stopped_bag ? \"Take down Bag\" : \"Cancel Bag\")\r\n\r\n  if( props.bag_running)\r\n  {\r\n   button_class=\"hidden\" \r\n  }\r\n}\r\nreturn(\r\n  <span>\r\n  <span> {message}</span>\r\n <button id=\"start_ivfluid_message\" className={button_class} onClick={()=>props.click_function(position)}> {button_label} </button> \r\n </span>\r\n)\r\n}\r\nexport default StopStartFluidsButton","import { useState, useEffect } from \"react\"\r\n\r\nfunction BagVolume(props)\r\n{\r\n  const [predicted_vol_remaining,setPredictedVolumeRemaining]=useState(props.vol_remaining)\r\n  const [bag_running,setBagRunning]=useState(props.bag_running)\r\n \r\n\r\nuseEffect(()=>\r\n  {\r\n    setBagRunning(props.bag_running)\r\n    const call_change_vol_remaining=()=>\r\n      {\r\n       setPredictedVolumeRemaining(predicted_vol_remaining-1)\r\n        props.fluid_infused.current=predicted_vol_remaining\r\n      }\r\n\r\n\r\n    if (bag_running && predicted_vol_remaining >0)\r\n      {\r\n        const countdown=()=>{setTimeout(call_change_vol_remaining, 100000/props.rate)}\r\n        countdown()\r\n        \r\n       return()=>{clearTimeout(countdown)}\r\n      } \r\n  },[bag_running, predicted_vol_remaining, props.bag_running,props.vol_remaining,props.checkbag])\r\n\r\n\r\nuseEffect(()=>{\r\nif (props.checkbag)\r\n{setPredictedVolumeRemaining(props.change_vol)}},[props.change_vol])\r\n\r\n return(\r\n <span>{predicted_vol_remaining}</span>\r\n    )\r\n}\r\n\r\n\r\nexport default BagVolume","import React, {useEffect, useState} from \"react\"\r\nimport \"./index.css\"\r\n\r\n\r\nfunction CheckBagForm(props)\r\n{\r\nconst[volumeEntered ,setVolumeEntered]=useState()\r\n\r\nconst submitFunction=(e)=>{e.preventDefault()\r\n    if (volumeEntered===undefined)\r\n        {props.getVol(props.vol)}\r\n    else\r\n        {props.getVol(volumeEntered)}\r\n    setVolumeEntered(\"\")\r\n    \r\n   \r\n}\r\n\r\nreturn(\r\n\r\n     <form onSubmit={submitFunction}>\r\n    <label htmlFor= \"new_volume\"> Enter Correct volume </label>\r\n    <input type= \"number\" id=\"new_volume\" required value={volumeEntered} onChange={e=>setVolumeEntered(e.target.value)}  />\r\n    <button type=\"submit\">Confirm Volume</button> \r\n    <span> Bag set to stopped for volume change - re-start after check complete</span>\r\n    </form>  \r\n)\r\n}\r\nexport default CheckBagForm","import React, { useEffect, useState } from \"react\";\r\nimport CheckBagForm from \"./CheckBagForm\"\r\nimport \"./index.css\"\r\n\r\nfunction CheckBag(props)\r\n{\r\nconst [checkCorrect, setCheckCorrect] = useState(true)\r\nconst [Corrected_volume, setCorrectedVolume]=useState(props.change_vol)\r\n\r\nuseEffect(()=>{props.getVol(Corrected_volume)},[Corrected_volume])\r\n\r\nconst changeSetCheckCorrect=()=>{\r\n    setCheckCorrect(false); \r\n    console.log(props.bag_running)\r\n    if(props.bag_running)\r\n        {\r\n        props.is_bag_running(props.running_bags-1) //decrements running bags since this is blocked in IV Bag during bag check to preent refresh error\r\n        }\r\n    props.start_stop_bag(false)//stops bag to prevent error during update\r\n}\r\nuseEffect(()=>{setCheckCorrect(true)},[Corrected_volume])\r\n\r\n\r\n\r\nconst checkbagform=<CheckBagForm key={props.index} getVol={setCorrectedVolume} vol={Corrected_volume}/>\r\n\r\nconst confirm_correct=()=>{setCheckCorrect(true)}\r\n\r\nreturn(\r\n<div>\r\n<span> Confirm Bag Volume Correct</span>\r\n <button id=\"check_is_corrct\" onClick ={confirm_correct}>Yes </button> \r\n <button id=\"check_not_correct\" onClick={changeSetCheckCorrect}> No </button>\r\n<div className={(checkCorrect ? \"hidden\" :\"show\")}>{checkbagform}</div>\r\n</div>\r\n) \r\n    \r\n}\r\n\r\nexport default CheckBag\r\n\r\n","import React, { useState } from \"react\";\r\n\r\n\r\n\r\nfunction AlterRate(props){\r\n\r\nconst [newRate, setNewRate]=useState()\r\n\r\n const submitFunction=(e)=>{\r\n    e.preventDefault()\r\n    props.new_rate(newRate);\r\n\r\n }\r\n\r\n\r\n\r\n return(\r\n \r\n<form id = \"rate_entry\" onSubmit={submitFunction}>\r\n<label htmlFor= \"rate_entry_input\">Enter New Rate for Bag (ml/hr) </label>\r\n<input id= \"rate_entry_input\" type=\"number\" required min=\"0\" onChange={e=>setNewRate(e.target.value)}/>\r\n<button id=\"rate_submit_button\" type= \"submit\">Change Bag Rate</button>\r\n</form>\r\n )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default AlterRate","import React, {useEffect, useState, useRef} from \"react\"\r\nimport StopStartFluidsButton from \"./StartStopFluidsButton.js\"\r\nimport BagVolume from \"./BagVolume.js\"\r\nimport CheckBag from \"./CheckBag.js\"\r\nimport AlterRate from \"./AlterRate.js\"\r\nimport \"./index.css\"\r\n\r\n\r\n\r\nfunction IvBag(props)\r\n{\r\nconst [bag_running, setBagRunning]=useState(false)\r\nconst [vol_remaining, setVolRemaining]=useState(props.bag.volume)\r\nconst [bag_started, setBagStarted] = useState(false)\r\nconst [displaystatus,setDisplayStatus]=useState(\"bag\")\r\nconst [vol_from_correct, setVolFromCorrect]=useState(props.bag.volume)\r\nconst [showCheckBag, setShowcheckBag]=useState(false)\r\nconst [showAlterRate, setShowAlterRate]=useState(false)\r\nconst [rate, setRate] = useState(props.bag.rate)\r\nconst [checkDue, setCheckDue]= useState(false)\r\nconst [new_fluid_left,setNewFluidLeft]=useState(props.bag.volume)\r\nconst time_started_str=useRef()\r\nconst checkduebutton=useRef(\"white\")\r\nconst fluid_infused=useRef(0)\r\nlet start_time= new Date()\r\nconst check_interval=30000\r\n\r\nuseEffect(()=>{\r\n  if(bag_running)\r\n  {\r\n        const check=()=>{setCheckDue(true)}\r\n        const checkTimer=()=>{setTimeout(check, check_interval)}\r\n       \r\n        if(showCheckBag)\r\n        {\r\n          clearTimeout(checkTimer)// resets timer if check done\r\n        } \r\n        checkTimer() \r\n          return()=>{clearTimeout(checkTimer)}\r\n  }\r\n  },[bag_running,showCheckBag])\r\n\r\n\r\nuseEffect(()=>{\r\n  if (showCheckBag)\r\n  {setVolRemaining(vol_from_correct)}\r\n},[vol_from_correct,showCheckBag])\r\n\r\n\r\nuseEffect(()=>{  \r\n  start_time=new Date();\r\n  if (bag_started)\r\n  {\r\n    if (start_time.getMinutes()>9)\r\n    {\r\n      time_started_str.current=`Bag first started at: ${start_time.getHours()}:${start_time.getMinutes()}`\r\n    }\r\n  else\r\n  {\r\n    time_started_str.current=`Bag first started at: ${start_time.getHours()}:0${start_time.getMinutes()}`\r\n  }\r\n}\r\n  },[bag_started])\r\n\r\n  \r\nuseEffect(()=>{\r\n  if (checkDue===true)\r\n  {\r\n    props.check_due(true)\r\n    checkduebutton.current=\"amber\"\r\n  }\r\n  if (showCheckBag===true)\r\n  {\r\n      props.check_due(false)\r\n      checkduebutton.current=\"white\"\r\n  }\r\n},[checkDue,showCheckBag])\r\n\r\n\r\nuseEffect(()=>\r\n{\r\n  if (bag_running && (!fluid_infused.current<=1) &&(!showCheckBag))\r\n  {\r\n    props.is_bag_running(props.running_bags+1)\r\n    \r\n  }\r\n  else if (!showCheckBag && bag_started && (!fluid_infused.current<=1))\r\n  {\r\n    props.is_bag_running(props.running_bags-1) \r\n  }\r\n},[bag_running,vol_remaining])\r\n\r\n\r\nuseEffect(()=>{fluid_infused.current=vol_from_correct},[vol_from_correct])//corrects infused volume reset during check\r\n\r\nuseEffect(()=>{\r\nif (fluid_infused.current<=1)//fluid inflused runs one behind actual volume\r\n{\r\n  start_stop_bag();\r\n}\r\n},[fluid_infused.current])\r\n\r\nconst show_volume=<BagVolume\r\n  key={props.index} \r\n  bag_running={bag_running}\r\n  vol_remaining={vol_remaining} \r\n  change_vol={vol_from_correct} \r\n  checkbag={showCheckBag}\r\n  patient_bags_running={props.running_bags}\r\n  rate={rate}\r\n  check={setCheckDue}\r\n  fluid_infused={fluid_infused}\r\n  />\r\n\r\nconst start_stop_bag=()=>{\r\nsetBagRunning(bag_running ? false : true); \r\nsetBagStarted(true)\r\n}\r\n\r\n\r\nconst take_down_bag=()=>{\r\nif (bag_started)\r\n{\r\n  if (window.confirm(\"Please perform a bag volume check before taking down a bag (Click Check Bag, correct the volume then click Check Complete).  If you have done this press OK to take down the bag. If not, click Cancel and check the bag volume now\"\r\n  ))\r\n  {\r\n    takeDownBagAction()\r\n  }\r\n}\r\nelse\r\n{\r\n  takeDownBagAction()\r\n}\r\n}\r\n\r\n\r\nconst takeDownBagAction=()=>\r\n  {\r\nsetDisplayStatus(\"hidden\");\r\nprops.decrement_bags(); \r\n  }\r\n\r\n\r\nconst take_down = <StopStartFluidsButton\r\nclick_function={take_down_bag}\r\nmessage_from_stopped_bag={bag_started} \r\nbag_running={bag_running} \r\nposition_in_array={props.array_position} />\r\n\r\n\r\n\r\nconst changeSetShowCheckFunction=()=>{\r\nsetCheckDue(false);\r\nif (showCheckBag)\r\n{\r\n  props.setFluidsToday(props.fluids_today+(new_fluid_left-fluid_infused.current))\r\n  setNewFluidLeft(fluid_infused.current)\r\n}\r\nsetShowcheckBag(!showCheckBag);\r\n}\r\n\r\n\r\nconst checkbag = <CheckBag key={props.index} index={props.index}\r\ngetVol={setVolFromCorrect}\r\nvol={vol_from_correct}\r\nbag_running={bag_running}\r\nstart_stop_bag={setBagRunning}\r\nis_bag_running={props.is_bag_running}\r\nrunning_bags={props.running_bags} />\r\n\r\n\r\nconst changeSetRateFunction=()=>{\r\nsetShowAlterRate(showAlterRate ? false : true)}\r\n\r\nconst alter_rate_component= <AlterRate key={props.index}\r\nnew_rate={setRate}/>\r\n\r\n\r\nreturn(\r\n  <div className={displaystatus}>\r\n    <span>Bag Id:-  {props.bag.bag_id}</span>\r\n    <span id=\"fluid\"> {props.bag.fluid}  {rate}  ml/hr</span> \r\n    <span>Volume remaining {show_volume}ml</span>\r\n    <span className={showCheckBag ? \"hidden\" : \"show_button\"}> <StopStartFluidsButton  click_function={start_stop_bag} message_from_bag={(bag_running ? \"Bag running\" : \"Bag not running\")} /></span>\r\n    <span className={(bag_started ? \"show_button\" :\"hidden\")}> <button className={checkduebutton.current} onClick={changeSetShowCheckFunction} > {(showCheckBag ? \"Bag Check Complete\" : \"Check Bag\")} </button></span>\r\n    <span> <button id=\"rate_button\" onClick={changeSetRateFunction}> {(showAlterRate ? \"Hide Change Rate\":\"Change Bag Rate\")}</button></span>\r\n    <span> {take_down}</span>\r\n    <span>  {time_started_str.current} </span>\r\n    <div className={(showAlterRate? \"show\" : \"hidden\")}>{alter_rate_component}</div>\r\n    <div className={(showCheckBag ? \"show\" : \"hidden\")}>{checkbag}</div>\r\n \r\n  </div>\r\n) \r\n}\r\n\r\nexport default IvBag\r\n ","\r\nimport React, { useEffect, useState } from 'react';\r\nimport IvBag from \"./IvBag.js\"\r\nimport StopStartFluidsButton from './StartStopFluidsButton.js';\r\n\r\nfunction Patient(props)\r\n{\r\n//initialise state\r\nconst [on_fluids,setOnFluids]=useState(props.patient_data.on_iv_fluids);\r\nconst [show_bags,setShowBags]=useState(false)\r\nconst [bags_prescribed,setBagsPrescribed]= useState(props.patient_data.bags.length)\r\nconst[bags_running, setBagRunning]=useState(0)\r\nconst [display_alert, setDisplayAlert]=useState(\"hidden\")\r\nconst [alarm_state, setAlarmState]=useState(\"green\")\r\nconst [alert_message, setAlertMessage]=useState(\"\")\r\nconst [bag_check_due,setBagCheckDue]= useState(false)\r\nconst [fluids_today,setFluidsToday]=useState(0)\r\n\r\n\r\n\r\nconst decrement_bags=()=>{setBagsPrescribed(bags_prescribed-1)}\r\nconst change_fluid_status=()=>{(setOnFluids(on_fluids ? false : true))}\r\n\r\n\r\nlet on_fluids_message= (on_fluids?\"On IV fluids\" :\"Not on IV fluids\")\r\n\r\nconst list_of_bags=props.patient_data.bags.map((eachbag, index)=><IvBag \r\n  showstatus={props.showstatus}\r\n  patient_data={props.patient_data} \r\n  key={index}  \r\n  bag={eachbag} \r\n  on_fluids={on_fluids} \r\n  decrement_bags={decrement_bags} \r\n  is_bag_running={setBagRunning}\r\n  running_bags={bags_running}\r\n  check_due={setBagCheckDue}\r\n  fluids_today={fluids_today}\r\n  setFluidsToday={setFluidsToday}\r\n  />)\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n  if(on_fluids)\r\n    {\r\n      if (bags_prescribed===0)\r\n      {\r\n      setAlarmState(\"red\")\r\n      setDisplayAlert(\"show\")\r\n      setAlertMessage(\"On IV fluids but no bags prescribed\")\r\n      }\r\n      else if (bags_running===0)\r\n      {\r\n      setAlarmState(\"red\")\r\n      setDisplayAlert(\"show\")\r\n      setAlertMessage(\"On IV fluids but no bags running\")\r\n      }\r\n      else if (bag_check_due)\r\n      {\r\n        setAlarmState(\"amber\")\r\n        setDisplayAlert(\"show\")\r\n        setAlertMessage(\"Bag check due\")\r\n      }\r\n      \r\n    else\r\n      {\r\n        setDisplayAlert(\"hidden\")\r\n        setAlarmState(\"green\")\r\n        setAlertMessage(\"\")\r\n      }\r\n    }\r\n      else\r\n      {\r\n        setDisplayAlert(\"hidden\")\r\n        setAlarmState(\"green\")\r\n        setAlertMessage(\"\")\r\n      }\r\n    \r\n},[on_fluids,bags_prescribed,bags_running,bag_check_due])\r\n\r\nconsole.log(alert_message)\r\nconsole.log(`total fluid infused${fluids_today}`)\r\nreturn(\r\n  <div className={alarm_state} id={props.patient_data.hosp_number} >\r\n  <span id=\"bed_number\"> {`Bed ${props.patient_data.bed}`}</span>\r\n  <span id=\"patient_name_message\">{props.patient_data.patient_name}</span>\r\n  <span id= \"hosp_number\"> {props.patient_data.hosp_number}</span>\r\n  <span id=\"on_fluid_message\"> <StopStartFluidsButton click_function={change_fluid_status} message_from_patient={on_fluids_message} / > </span>\r\n  <span id=\"numb_bags_message\">{`${bags_prescribed} bags prescribed`}</span>\r\n  <button onClick={()=>{setShowBags(show_bags ? false : true)}}> Show/Hide Bags </button> \r\n  <span> {bags_running} bag(s) running. </span>\r\n  <span id=\"checked_volume\">Total checked volume: {fluids_today} ml</span>\r\n  <div id=\"alertmessage\" className={display_alert}>{alert_message}</div>\r\n  <div className={(show_bags ? \"show\" : \"hidden\")}> {list_of_bags} </div>\r\n  </div>\r\n\r\n  \r\n  )\r\n}\r\n\r\n export default Patient","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport patients from \"./mock_patients.js\"\nimport Patient from \"./patient.js\"\n\nfunction App() {\n  let patient_list=patients\n\n  return (\n    <>\n    <Ward />\n    <PatientList  data={patient_list} />\n    </>\n  );\n}  \n\nfunction Ward()\n{\nreturn(\n<div id=\"ward\">Ward 26</div>\n)\n\n}\nfunction PatientList(props)\n{\n  \n  const list_of_patients=props.data.map((data_item, index)=><Patient key={index} patient_data={data_item} patient_in_array={index} />)\n  return (list_of_patients)\n\n}\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()"],"sourceRoot":""}